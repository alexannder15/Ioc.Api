CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;
CREATE TABLE "Users" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "FirstName" character varying(128),
    "LastName" character varying(128),
    "State" integer NOT NULL,
    "PictureUrl" text,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "UserName" character varying(128),
    "NormalizedUserName" character varying(128),
    "Email" character varying(128),
    "NormalizedEmail" character varying(128),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL,
    CONSTRAINT "PK_Users" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Users_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_Users_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id")
);

CREATE TABLE "Roles" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text,
    CONSTRAINT "PK_Roles" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Roles_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_Roles_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id")
);

CREATE TABLE "UserClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "UserId" integer NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_UserClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_UserClaims_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserClaims_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserClaims_Users_UserId" FOREIGN KEY ("UserId") REFERENCES "Users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "UserLogins" (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "ProviderDisplayName" text,
    "UserId" integer NOT NULL,
    CONSTRAINT "PK_UserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_UserLogins_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserLogins_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserLogins_Users_UserId" FOREIGN KEY ("UserId") REFERENCES "Users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "UserTokens" (
    "UserId" integer NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "Value" text,
    CONSTRAINT "PK_UserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_UserTokens_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserTokens_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserTokens_Users_UserId" FOREIGN KEY ("UserId") REFERENCES "Users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "RoleClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    "RoleId" integer NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_RoleClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_RoleClaims_Roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "Roles" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_RoleClaims_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_RoleClaims_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id")
);

CREATE TABLE "UserRoles" (
    "UserId" integer NOT NULL,
    "RoleId" integer NOT NULL,
    "IsDeleted" boolean NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "UpdatedOn" timestamp with time zone,
    "CreatedById" integer,
    "UpdatedById" integer,
    CONSTRAINT "PK_UserRoles" PRIMARY KEY ("UserId", "RoleId"),
    CONSTRAINT "FK_UserRoles_Roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "Roles" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_UserRoles_Users_CreatedById" FOREIGN KEY ("CreatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserRoles_Users_UpdatedById" FOREIGN KEY ("UpdatedById") REFERENCES "Users" ("Id"),
    CONSTRAINT "FK_UserRoles_Users_UserId" FOREIGN KEY ("UserId") REFERENCES "Users" ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_RoleClaims_CreatedById" ON "RoleClaims" ("CreatedById");

CREATE INDEX "IX_RoleClaims_RoleId" ON "RoleClaims" ("RoleId");

CREATE INDEX "IX_RoleClaims_UpdatedById" ON "RoleClaims" ("UpdatedById");

CREATE INDEX "IX_Roles_CreatedById" ON "Roles" ("CreatedById");

CREATE INDEX "IX_Roles_UpdatedById" ON "Roles" ("UpdatedById");

CREATE UNIQUE INDEX "RoleNameIndex" ON "Roles" ("NormalizedName");

CREATE INDEX "IX_UserClaims_CreatedById" ON "UserClaims" ("CreatedById");

CREATE INDEX "IX_UserClaims_UpdatedById" ON "UserClaims" ("UpdatedById");

CREATE INDEX "IX_UserClaims_UserId" ON "UserClaims" ("UserId");

CREATE INDEX "IX_UserLogins_CreatedById" ON "UserLogins" ("CreatedById");

CREATE INDEX "IX_UserLogins_UpdatedById" ON "UserLogins" ("UpdatedById");

CREATE INDEX "IX_UserLogins_UserId" ON "UserLogins" ("UserId");

CREATE INDEX "IX_UserRoles_CreatedById" ON "UserRoles" ("CreatedById");

CREATE INDEX "IX_UserRoles_RoleId" ON "UserRoles" ("RoleId");

CREATE INDEX "IX_UserRoles_UpdatedById" ON "UserRoles" ("UpdatedById");

CREATE INDEX "EmailIndex" ON "Users" ("NormalizedEmail");

CREATE INDEX "IX_Users_CreatedById" ON "Users" ("CreatedById");

CREATE INDEX "IX_Users_UpdatedById" ON "Users" ("UpdatedById");

CREATE UNIQUE INDEX "UserNameIndex" ON "Users" ("NormalizedUserName");

CREATE INDEX "IX_UserTokens_CreatedById" ON "UserTokens" ("CreatedById");

CREATE INDEX "IX_UserTokens_UpdatedById" ON "UserTokens" ("UpdatedById");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250531041505_InitialCreate', '9.0.5');

COMMIT;

-- Insert Admin role if it doesn't exist
INSERT INTO "Roles" ("Name", "NormalizedName", "IsDeleted", "CreatedOn")
SELECT 'Admin', 'ADMIN', FALSE, NOW()
WHERE NOT EXISTS (
    SELECT 1 FROM "Roles" WHERE "NormalizedName" = 'ADMIN'
);

-- Insert admin user if it doesn't exist
INSERT INTO "Users" (
    "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed",
    "IsDeleted", "CreatedOn", "PasswordHash", "State",
    "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnabled", "AccessFailedCount"
)
SELECT
    'admin@example.com', 'ADMIN@EXAMPLE.COM', 'admin@example.com', 'ADMIN@EXAMPLE.COM', TRUE,
    FALSE, NOW(),
    -- Replace with a real hash generated by ASP.NET Identity for your password
    'AQAAAAIAAYagAAAAEI+EmETzACYw/Xz0bLyJ1A2DiE7+vKTpAFLst1YxbT1D9Ud+WRSkS1YNGLKbOZ8mtA==',
    1, -- State
    FALSE, -- PhoneNumberConfirmed
    FALSE, -- TwoFactorEnabled
    FALSE, -- LockoutEnabled
    0      -- AccessFailedCount
WHERE NOT EXISTS (
    SELECT 1 FROM "Users" WHERE "NormalizedEmail" = 'ADMIN@EXAMPLE.COM'
);

-- Assign admin user to Admin role
INSERT INTO "UserRoles" ("UserId", "RoleId", "IsDeleted", "CreatedOn")
SELECT u."Id", r."Id", FALSE, NOW()
FROM "Users" u, "Roles" r
WHERE u."NormalizedEmail" = 'ADMIN@EXAMPLE.COM'
  AND r."NormalizedName" = 'ADMIN'
  AND NOT EXISTS (
      SELECT 1 FROM "UserRoles" ur WHERE ur."UserId" = u."Id" AND ur."RoleId" = r."Id"
  );